classdef CompDefaults
    properties (Constant)
%         Synechoccocus_elongatus_UTEX_2973 = struct(['test','']); % Species specific growth parameters for SE
%         Microcystis_aeruginosa = struct(['test','']); % Species specific growth parameters for MA
%         Yarrowia_lipolytico = struct(['test','']); % Species specific growth parameters for YL
%         Custom_Species = struct(['test','']); % Species specific growth parameters for any given custom Species

        defaultFuncVals = struct( ...
            'spec', struct('Multiplicative', struct( ...
                                'Monod', "C1/(C1+K1_1)", ...
                                'Linear', "A*C1", ...
                                'Custoom', "1" ...
                            ), ...
                            'Additive', struct( ...
                                'Monod', "C1/(C1+K1_1)", ...
                                'Linear', "A*C1", ...
                                'Custoom', "1" ...
                            ) ...
                        ), ...
            'chem', struct('Multiplicative', struct( ...
                                'Monod', "C1/(C1+K1_1)", ...
                                'Linear', "A*C1", ...
                                'Custoom', "1" ...
                            ), ...
                            'Additive', struct( ...
                                'Monod', "C1/(C1+K1_1)", ...
                                'Linear', "A*C1", ...
                                'Custoom', "1" ...
                            ) ...
                        ) ...
        );

        validFuncTypes = struct( ...
            'spec', struct('Multiplicative', { ...
                            'Monod', 'Linear', 'Custom' ...
                        }, ...
                        'Additive', { ...
                            'Monod', 'Linear', 'Custom'}), ...
            'chem', struct('Multiplicative', { ...
                            'Monod', 'Linear', 'Custom' ...
                        }, ...
                        'Additive', { ...
                            'Linear', 'Monod', 'Custom'}) ...
        );
    end

    % Format for field - paramVal:
    % replace '^', ' ' with '_'
    % replace '+' with 'p'
    % replace '-' with 'n'
    % replace 'Half-Saturation' with 'K', g/L
    % replace 'Yield' with 'Y', g/g
    % replace 'Death Constant' with 'k', 1/hr
    % replace 'Inhibition Constant' with 'KI', g/L

    methods (Static)
        function specD = CompDefaults()
%             specD.Synechoccocus_elongatus_UTEX_2973.K_NO3_n = 0.032;
        end

        function defaultFuncValue = getDefaultFuncVals(comp, funcCombo, funcType)
            defaultFuncValue = CompDefaults.defaultFuncVals.(comp.getType()).(funcCombo).(funcType);
        end

        function validFuncs = getValidFuncs(comp, funcCombo)
            validFuncs = {CompDefaults.validFuncTypes.(comp.getType()).(funcCombo)};
        end

        function MTFuncVal = getDefaultMTFuncVals(MTFuncName,phaseACompSym,phaseBCompSym,phaseASym,phaseBSym,compMWSym)
            switch MTFuncName
                case "None"
                    MTFuncVal = "0";

                case "First-Order with respect to Concentration Differential"
                    compNum = regexp(phaseACompSym,'\d*','match');
                    phaseANum = regexp(phaseASym,'\d*','match');
                    phaseBNum = regexp(phaseBSym,'\d*','match');
                    phaseLetter = "S";
                    if strcmp(phaseASym,"V")
                        phaseANum = "V";
                        phaseLetter = "C";
                    end
                    if strcmp(phaseBSym,"V"), phaseBNum = "V"; end
                    if strcmp(phaseASym,"(V_m-V_tot)")
                        phaseANum = "V_g";
                        phaseLetter = "P";
                    end
                    if strcmp(phaseBSym,"(V_m-V_tot)"), phaseBNum = "V_g"; end

                    if strcmp(phaseASym,"(V_m-V_tot)")
                        MTFuncVal = "k_"+phaseLetter+"_"+compNum{1}+"_"+phaseANum{1}+"_"+phaseBNum{1}+"*("+"R*T"+")/("+phaseASym+"*"+compMWSym+")*("+phaseBCompSym+"-"+phaseACompSym+")";
                    else
                        MTFuncVal = "k_"+phaseLetter+"_"+compNum{1}+"_"+phaseANum{1}+"_"+phaseBNum{1}+"/"+phaseASym+"*("+phaseBCompSym+"-"+phaseACompSym+")";
                    end
            end
        end
    end
end